config:
  endpoint_under_test:
    kind: echo
  default_request:
    chat_uuid: '0xdead'

steps:
  # Send `message` only:
  - 'Write success in the response'

  - name: Send request with additional fields, including variable
    request:
      message: 'Hello!'
      chat_uuid: '{{ chat_uuid }}'

  - name: Send hello and check assertions. Force False result for 2nd assert.
    request:
      message: 'Hello!'
      chat_uuid: '0x11'
    asserts:
      - eval: 'True == True' # Python code evaluated
      - eval: 'response.message == "Hello!"' # Check message field in response
        result: False # ...but force failure
      - 'response.chat_uuid == "0x11"' # no keyword means eval

  - name: Send previous received chat_uuid and demonstrate fields evaluation
    request:
      message:
        eval: 'str("Here is previous chat_uuid")' # Field evaluated
      chat_uuid:
        eval: 'last_response.chat_uuid' # Field evaluated using in-context variable `last response`
      asr_build:
        some_field1: 'field1'
        some_field2: 'field2'
        some_field3:
          eval: '2+2' # Deep evaluation. BE AWARE that `asr_build` contain dict object, not nested request
    asserts:
      - eval: 'response.chat_uuid == "0x11"'

  - name: Send hello and check assertions which are incorrect
    request:
      message: 'Hello!'
    asserts:
      - eval: 'name_does_not_exist == True' # wrong assertion
      - eval: 'print("asd")' # wrong assertion, not bool
      - eval: '2+2' # wrong assertion, not bool

  - name: Pass JSON in a different ways # This demonstrates how to pass json data
    request:
      message: 'This contains json'
      parse_response_as_json: true
      json1: >
        { 
        "key1": [
        {
        "key2": "find_me"}]}
      json2: |
        { 
        "key1": [
        {
        "integer": 1337,
        "str_integer": "1337",
        "key2": "find_me"}]}
      json3: '{{ json3 }}'
      dict1:
        key1:
          - key2: 'find_me'
      integer: 1337
      str_integer: '1337'
    asserts:
      - eval: 'response.json1["key1"][0]["key2"] == "find_me"'
      - eval: 'response.json2["key1"][0]["key2"] == "find_me"'
      - eval: 'response.json3["key1"][0]["key2"] == "find_me"'
      - eval: 'response.dict1["key1"][0]["key2"] == "find_me"'
      - eval: 'response.json2["key1"][0]["integer"] == 1337'
      - eval: 'response.json2["key1"][0]["str_integer"] == "1337"'
      - eval: 'response.integer == 1337'
      - eval: 'response.str_integer == "1337"'

variables:
  chat_uuid: '0x00'
  json3: >
    { 
    "key1": [
    {
    "key2": "find_me"}]}
